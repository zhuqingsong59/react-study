{"ast":null,"code":"var _jsxFileName = \"/Users/zqs/personal/react-study/src/components/clock.js\";\nimport React from 'react';\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date()\n    };\n  } //在组件即将被挂载到页面上时自动执行（挂载之前）\n\n\n  componentWillMount() {\n    console.log('componentWillMount');\n  } //渲染页面\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"It is \", this.state.date.toLocaleTimeString()));\n  } //在组件即将被挂载到页面后时自动执行（挂载之后）\n\n\n  componentDidMount() {\n    this.timerID = setInterval( // 直接修改 state并不会重新渲染组件，需要使用this.setState()代替\n    () => this.setState({\n      date: new Date()\n    }), 1000);\n  } //当组件从父组件中接受参数，父组件的render函数重新执行，则子组件该函数执行\n\n\n  componentWillReceiveProps() {\n    console.log('componentWillReceiveProps');\n  } //在组件被更新之前自动执行\n\n\n  shouldComponentUpdate() {\n    // console.log('shouldComponentUpdate')\n    //当return为turn，则更新被执行。当返回为false，则更新被取消\n    return true;\n  } //组件被更新之前执行。当shouldComponentUpdate返回false时不执行\n\n\n  componentWillUpdate() {} // console.log('componentWillUpdate');\n  //在组件更新完成之后执行\n\n\n  componentDidUpdate() {} // console.log('componentDidUpdate');\n  //当组件即将卸载时执行\n\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n}\n\nexport default Clock;","map":{"version":3,"sources":["/Users/zqs/personal/react-study/src/components/clock.js"],"names":["React","Clock","Component","constructor","props","state","date","Date","componentWillMount","console","log","render","toLocaleTimeString","componentDidMount","timerID","setInterval","setState","componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","componentDidUpdate","componentWillUnmount","clearInterval"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,KAAN,SAAoBD,KAAK,CAACE,SAA1B,CAAoC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,IAAI,EAAE,IAAIC,IAAJ;AAAP,KAAb;AACD,GAJiC,CAKlC;;;AACAC,EAAAA,kBAAkB,GAAI;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD,GARiC,CASlC;;;AACAC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAW,KAAKN,KAAL,CAAWC,IAAX,CAAgBM,kBAAhB,EAAX,CADF,CADF;AAKD,GAhBiC,CAiBlC;;;AACAC,EAAAA,iBAAiB,GAAI;AACnB,SAAKC,OAAL,GAAeC,WAAW,EACxB;AACA,UAAM,KAAKC,QAAL,CAAc;AACZV,MAAAA,IAAI,EAAE,IAAIC,IAAJ;AADM,KAAd,CAFkB,EAKxB,IALwB,CAA1B;AAOD,GA1BiC,CA2BlC;;;AACAU,EAAAA,yBAAyB,GAAE;AACzBR,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACD,GA9BiC,CA+BlC;;;AACAQ,EAAAA,qBAAqB,GAAE;AACrB;AACA;AACA,WAAO,IAAP;AACD,GApCiC,CAqClC;;;AACAC,EAAAA,mBAAmB,GAAE,CAEpB,CAFkB,CACjB;AAEF;;;AACAC,EAAAA,kBAAkB,GAAE,CAEnB,CAFiB,CAChB;AAEF;;;AACAC,EAAAA,oBAAoB,GAAI;AACtBC,IAAAA,aAAa,CAAC,KAAKR,OAAN,CAAb;AACD;;AAhDiC;;AAmDpC,eAAeb,KAAf","sourcesContent":["import React from 'react';\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {date: new Date()};\n  }\n  //在组件即将被挂载到页面上时自动执行（挂载之前）\n  componentWillMount () {\n    console.log('componentWillMount')\n  }\n  //渲染页面\n  render() {\n    return (\n      <div>\n        <h2>It is {this.state.date.toLocaleTimeString()}</h2>\n      </div>\n    )\n  }\n  //在组件即将被挂载到页面后时自动执行（挂载之后）\n  componentDidMount () {\n    this.timerID = setInterval(\n      // 直接修改 state并不会重新渲染组件，需要使用this.setState()代替\n      () => this.setState({\n              date: new Date()\n            }),\n      1000\n    )\n  }\n  //当组件从父组件中接受参数，父组件的render函数重新执行，则子组件该函数执行\n  componentWillReceiveProps(){\n    console.log('componentWillReceiveProps')\n  }\n  //在组件被更新之前自动执行\n  shouldComponentUpdate(){\n    // console.log('shouldComponentUpdate')\n    //当return为turn，则更新被执行。当返回为false，则更新被取消\n    return true\n  }\n  //组件被更新之前执行。当shouldComponentUpdate返回false时不执行\n  componentWillUpdate(){\n    // console.log('componentWillUpdate');\n  }\n  //在组件更新完成之后执行\n  componentDidUpdate(){\n    // console.log('componentDidUpdate');\n  }\n  //当组件即将卸载时执行\n  componentWillUnmount () {\n    clearInterval(this.timerID)\n  }\n}\n\nexport default Clock\n"]},"metadata":{},"sourceType":"module"}